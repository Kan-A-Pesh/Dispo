
{
	// Place your api workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Router Template": {
		"scope": "javascript,typescript",
		"prefix": ["rtr", "root", "!!", "azroot"],
		"body": [
			"const express = require('express');",
			"const router = express.Router();",
			"",
			"router.$2('/$1', (req, res) => {",
			"\t$0",
			"});",
			"",
			"module.exports = router;"
		]
	},
	"Require Auth": {
		"scope": "javascript,typescript",
		"prefix": ["!auth", "azauth"],
		"body": [
			"let user = User.getRequestUser(req);",
			"if (user == null) {",
			"\tres.status(401).send(",
			"\t\tJSON.stringify({",
			"\t\t\tcode: '401',",
			"\t\t\tstatus: 'Unauthorized',",
			"\t\t\tmessage: 'No session found, try to reconnect',",
			"\t\t})",
			"\t);",
			"\treturn;",
			"}",
			"$0"
		]
	},
	"Require param": {
		"scope": "javascript,typescript",
		"prefix": ["param", "!param", "azparam"],
		"body": [
			"if (req.$1.$2 === undefined) {",
			"\tres.status(400).send(",
			"\t\tJSON.stringify({",
			"\t\t\tcode: '400',",
			"\t\t\tstatus: 'Bad request',",
			"\t\t\tmessage: 'The $2$3 is missing',",
			"\t\t})",
			"\t);",
			"\treturn;",
			"}",
			"$0"
		]
	},
	"SQL Query": {
		"scope": "javascript,typescript",
		"prefix": ["sqlquery", "sqlq", "!querysql", "azsql"],
		"body": [
			"sql.query(",
			"\t\"$1\",",
			"\t{",
			"\t\t$0",
			"\t},",
			"\t(err, result) => {",
			"\t\tif (err) {",
			"\t\t\tconsole.log(\"Error, can't $2: \" + err.sqlMessage);",
			"\t\t\tres.status(500).send(",
			"\t\t\t\tJSON.stringify({",
			"\t\t\t\t\tcode: '500',",
			"\t\t\t\t\tstatus: 'Internal Server Error',",
			"\t\t\t\t\tmessage: \"Can't $2: \" + err.sqlMessage,",
			"\t\t\t\t\tsqlCode: err.code,",
			"\t\t\t\t\tsqlNumber: err.errno,",
			"\t\t\t\t})",
			"\t\t\t);",
			"\t\t\treturn;",
			"\t\t}",
			"\t\t",
			"\t\tres.status(200).send(",
			"\t\t\tJSON.stringify({",
			"\t\t\t\tcode: '200',",
			"\t\t\t\tstatus: 'OK',",
			"\t\t\t\tmessage: \"$3\",",
			"\t\t\t})",
			"\t\t);",
			"\t}",
			");"
		]
	}
}